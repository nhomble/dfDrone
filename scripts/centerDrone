#!/usr/bin/env python2

'''
Subscribe to startDrone for the centroids and then
determine the change in (x, y) to recenter the drone. 
The node is also provides the quickness of each new point
to give moveDrone a sense of how fast it must react

The reason we want this node inbetween startDrone and moveDrone
is the fact that I may get a number of false-negatives inbetween
some number of images. This node will require consecutive detections
to be false until randomWalk is initiated.

'''

# python built-ins
import math
import random
import subprocess
import sys
import time

# ROS
import roslib; roslib.load_manifest('dfDrone')
import rospy
from std_msgs.msg import Float64MultiArray

# until I integrate my messages in ROS
import messageDrone

pub = None

# globals, need to remember previous 
g_miss = 0
g_found = 0

g_lastVelocity = None

MISS_MAX = 20
FOUND_MIN = 3

DEBUG_STRING = "\t[CENTER_DRONE] "
ESPEAK = False
def main(argv=None):
	if argv is None:
		argv = sys.argv

	rospy.init_node('centerDrone')
	rospy.loginfo(DEBUG_STRING + "centerDrone has initialized")

	dfd_sub = rospy.Subscriber('startDrone', Float64MultiArray, centroidCallback)
	rospy.spin()

def centroidCallback(message):
	message = messageDrone.DFDMessage(message.data[0] == 1.0, (message.data[1], message.data[2]), message.data[3], message.data[4], message.data[5], message.data[6])

	global g_miss
	global g_found

	delT = time.time() - g_last_time

	if message.isPresent is True:
		g_miss = 0
		g_found += 1
		newZ = getZPosition(message.area)

		if g_found > FOUND_MIN:
			sendVelocityMessage(message, delT, newZ)
		else:
			sendStopMessage()
	else:
		rospy.loginfo(DEBUG_STRING + "misses: " + str(g_miss))
		g_found = 0
		g_miss += 1	
		if g_miss > MISS_MAX:
			g_miss = MISS_MAX/2
			rospy.loginfo(DEBUG_STRING + "requesting random walk")
			sendRandomWalk(message.width, message.height)
		elif g_miss < MISS_MAX/2:
			rospy.loginfo(DEBUG_STRING + "lost it, going to try to interpolate where it should be")
			sendSeekMessage()

# I will scale the linear motion in moveDrone, TODO
def getZPosition(area):
	goalArea = 1000
	z = area/goalArea
#	rospy.loginfo(DEBUG_STRING + " calculated z: " + str(z))
	return z

# simple, just fix the linear motion (z) for simplicity
#	TODO, scale linear motion by suspected area
# other than that, just publish the raw angular motion for now
def sendVelocityMessage(DFDMessage, delT, newZ):
	global g_lastVelocity
	xCenter = DFDMessage.width // 2
	yCenter = DFDMessage.height // 2

	z = .3
	vel = messageDrone.DFDVelocity(True, DFDMessage.x - xCenter, DFDMessage.y - yCenter, z, delT)
	g_lastVelocity = vel
	
	pub.publish(vel.ros())

# so we have lost track of it, but it could not have gone too far away
def sendSeekMessage():
	if g_lastVelocity is None:
		return
# 	amplify the last message	
	g_lastVelocity.amplify(3)
	pub.publish(vel.ros())

# random velocity
# just give the turtlebot follower a random (x,y,z)
def sendRandomWalk(width, height):
	vel = messageDrone.DFDVelocity(False, None, None, None, None)

	vel.x = random.uniform(0, 3)
	vel.y = random.uniform(-3, 3)
	vel.z = random.randint(0, 2)
	vel.z = 0
	pub.publish(vel.ros())

# when I see anything that might look like the drone I want to STOP
# and look at it rather than complete my random movement
def sendStopMessage():
	vel = messageDrone.DFDVelocity(True, 0, 0, 0, 0)
	pub.publish(vel.ros())

if __name__ == "__main__":
	global pub
	pub = rospy.Publisher("centerDrone", Float64MultiArray)
	sys.exit(main())
