#!/usr/bin/env python2

# python built-ins
import random
import sys

# ROS
import roslib; roslib.load_manifest('dfDrone')
import rospy
import tf.transformations
from geometry_msgs.msg import Twist
from std_msgs.msg import Float64MultiArray

# my modules
import velocityDrone

'''
subscribe to centerDrone and given the
velocity messages, I determine the necessary
twist messages
'''

global_cmd_pub = None

def main(argv=None):
	if argv is None:
		argv = sys.argv

	rospy.init_node('moveDrone')
	rospy.loginfo("\t\tmoveDrone has initialized")
	sub = rospy.Subscriber('centerDrone', Float64MultiArray, moveCallback)
	rospy.spin()

# check whether or we actually have a velocity or I need to 
# random walk
def moveCallback(velocity):
	vel = velocityDrone((velocity[0] == 1.0), velocity[1], velocity[2], velocity[3], velocity[4])
	if vel.isPresent is True:
		move(velocity)
	else:
		twoBit = random.randInt(0, 3)
		rospy.loginfo("\t\trandom walk " + str(twoBit))
	
		options = {0:r0, 1:r1, 2:r2, 3:r3}
		options[twoBit]()
		
		rospy.sleep(1)
		twist = Twist()
		global_cmd_pub.publish(twist)
# 4 possibilities
#	0: linear movement, no rotational movement
#	1: no linear movement, no rotational movement
#	2: no linear movement, rotational movement
#	3: linear movement, rotational movement
def r0():
	vel = random.uniform(-3, 3)
	twist = Twist()
	twist.linear.x = vel

	global_cmd_pub.publish(twist)

def r1():
	twist = Twist()
	global_cmd_pub.publish(twist)

def r2():
	rot = random.uniform(-3, 3)
	twist = Twist()
	twist.angular.z = vel

	global_cmd_pub.publish(twist)

def r3():
	r0()
	rospy.sleep(1)
	r2()

# assume the last centroid was at the center of our view
# must send rotational message first then linear message
def move(vel):
	rospy.loginfo("\t\tmove")

	twist = Twist()
	twist.linear.x = 2*vel.delY
	global_cmd_pub.publish(twist)
	rospy.loginfo("\t\tlinear movement")
	rospy.sleep(vel.delay/2)

	twist = Twist()
	yDist = vel.delY * vel.delay
	theta = Math.atab(yDist)
	twist.angular.z = theta * 2 / vel.delay
	rospy.loginfo("\t\tangular movement")
	rospy.sleep(vel.delay/2)

if __name__ == "__main__":
	global_cmd_pub = rospy.Publisher('/cmd_vel_mux/input/teleop', Twist)
	sys.exit(main())
